FORMAT: 1A
HOST: http://iot-camera-object-recognizer.herokuapp.com/webapi

# IOT Object Camera Recognizer.

IOT object camera recognizer.
Orginize camera objects list and check current state of stage.


# Ping [/ping]

## Ping service [GET]

Returns `200` if service is alive.

+ Response 200 (application/json)


# Get List or Add new Object api [/houses/{house_id}/objects]

+ Parameters
    + house_id (required, string, `76c6-456d-8971`) ... Unique house identifier

## List All Objects [GET]
Returns code 200 and list of jsons if correct house_id, 404 otherwise.
+ Response 200 (application/json)

    + Body

            [
                {
                    "id": "randomid1",
                    "type": "chair"
                },
                {
                    "id": "kokanto",
                    "type": "toxic"
                },
                {
                    "id": "randomid3",
                    "type": "table"
                }
            ]

+ Response 404 (application/json)

## Add Object [POST]

You may put new object in camera known list(placed on the stage).
If house_id is incorrect 404 is returned.

+ type (string) - object type

+ Request (application/json)

        {
            "type": "alien"
        }

+ Response 200 (application/json)

    + Body

            {
                "id": "newObjectId",
                "type": "alien"
            }

+ Response 404 (application/json)

# Manage Known objects api [/houses/{house_id}/objects/{object_id}]

+ Parameters
    + object_id (required, string, `76c6-456d-8971`) ... ID of an object, returned by api when called put object


### Get Object by id [GET]
Get an object type by id, if house_id or object_id is not valid 404 is returned.

+ Response 200 (application/json)

    + Body

            {
                "id": "requestedid",
                "type": "objecttype"
            }

+ Response 404 (application/json)

### Put Object by id [PUT]

You may update object type by id. 404 if invalid ids

+ type (string): new object type

+ Request (application/json)

        {
            "type": "newType"
        }

+ Response 200 (application/json)

    + Body

            {
                "id": "objectid",
                "type": "newType"
            }

+ Response 404 (application/json)

### Delete Object by id [DELETE]

You may delete object type by id. 404 if invalid ids

+ type (string): new object type

+ Response 200 (application/json)

+ Response 404 (application/json)

# Check for unknown objects api [GET/houses/{house_id}/check]

You may ask recognizer for uknown objects on the stage.
if result is false then list of objects is returned as value of "objects"
key. If everything is Ok then only result true is returned.
404 is returned if house_id is invalid.

+ Parameters
    + house_id - string, same house identifier as in manage objects api.

+ Response 200 (application/json)

    + Body

            {
                "result": false,
                "objects": [
                            "unknownchair",
                            "unknownkoka",
                            "unknownakunamatata"
                    ]
            }

+ Response 404 (application/json)